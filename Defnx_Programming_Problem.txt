Section - 1

1. Write a function that extracts all the odd digits in a string that can have any number of digits, and returns the sum of those digits. If there are no digits, return null. (E.g. ABC1YU5HG8B7H returns 13)

def sum_odd_digits(input_string):
  odd_digits = [int(char) for char in input_string 
                if char.isdigit() and int(char) % 2 != 0]
  if odd_digits:
      return sum(odd_digits)
  else:
      return None
    
input_string = "ABC1YU5HG8B7H"
result = sum_odd_digits(input_string)
print(result) 


2. Write a function that accepts two strings, where each string is a very large number (around 200 digits each), and returns the difference of those two numbers.

def subtract_large_numbers(num1, num2):
    if len(num1) < len(num2):
        num1, num2 = num2, num1
    num2 = num2.zfill(len(num1))
    result = []
    carry = 0
    for i in range(len(num1)-1, -1, -1):
        digit_diff = int(num1[i]) - int(num2[i]) - carry
        if digit_diff < 0:
            digit_diff += 10
            carry = 1
        else:
            carry = 0
        result.append(str(digit_diff))
    while len(result) > 1 and result[-1] == '0':
        result.pop()
    return ''.join(result[::-1])

num1 = ""
num2 = "9876543210987654321098765432109876543210"
difference = subtract_large_numbers(num1, num2)
print(difference)

3. Write a function that takes a list, where each item in the list is also a list of numbers. The function then returns the list that has the maximum number of even numbers. For example - If Input is - [[1,2,3,4], [1, 1, 3, 2], [3, 5, 7]] Output is - [1, 2, 3, 4,]
def max_even_sublist(list_of_lists):
  max_even_count = 0
  max_even_sublist = []

  for sublist in list_of_lists:
      even_count = sum(1 for num in sublist if num % 2 == 0)
      if even_count > max_even_count:
          max_even_count = even_count
          max_even_sublist = sublist

  return max_even_sublist

input_list = [[1,2,3,4], [1, 1, 3, 2], [3, 5, 7]]
result = max_even_sublist(input_list)
print(result)

4. Write a function that takes a list of numbers and determines if the list is sorted or not.

def is_sorted(arr):
  is_ascending = all(arr[i] <= arr[i+1] for i in range(len(arr)-1))
  is_descending = all(arr[i] >= arr[i+1] for i in range(len(arr)-1))
  return is_ascending or is_descending

list1 = [1, 2, 3, 4, 5]
print(is_sorted(list1))  
list2 = [5, 4, 3, 2, 1]
print(is_sorted(list2))  
list3 = [1, 3, 2, 4, 5]
print(is_sorted(list3))  

5. Write a function that takes a list of strings and determines if the list is sorted or not (if the strings are in dictionary order or not)

def is_sorted_strings(lst):
  return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))

string_list1 = ["apple", "banana", "orange", "pear"]
print(is_sorted_strings(string_list1))  

string_list2 = ["banana", "apple", "pear", "orange"]
print(is_sorted_strings(string_list2))  


Section 2

Design an Entity-Relationship schema for a database of events. The database should contain
the information about:
● Users - A user will have a name, email, and phone no.
● Event - An event will have the title, start-date, end date, and status which can be - Pending,
In progress, Completed, and Canceled
The Information that must be captured in the database is related to the following functionalities -
1 - A user can create an event, and edit it
2 - A user can invite other users to his events, and these guests can either accept or Reject that
invitation
3- For events that span across multiple days, a guest may be invited for the whole event, or for
individual days only
As part of the solution, either create an Entity Relationship schema or create a relational
database schema that covers the above requirements.

Entities:
- User
  - user_id (Primary Key)
  - name
  - email
  - phone_no

- Event
  - event_id (Primary Key)
  - title
  - start_date
  - end_date
  - status (Pending, In-progress, Completed, Canceled)

- EventGuest
  - event_id (Foreign Key referencing Event)
  - user_id (Foreign Key referencing User)
  - invite_status (Accepted, Rejected)
  - attending_days (optional, if the event spans across multiple days)

Relationships:
- User can create and edit an Event (one-to-many):
  - Each User can create multiple Events.
  - One User creates each Event.

- User can invite other Users to an Event (many-to-many):
  - Each User can be invited to multiple Events.
  - Each Event can have multiple invited Users.
  - This relationship is captured through the EventGuest entity.

- EventGuest can accept or reject an invitation (one-to-many):
  - Each EventGuest can have only one invite status for a specific Event.
  - Each Event can have multiple EventGuests, each with their invite status.


CREATE TABLE User (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    email VARCHAR(255),
    phone_no VARCHAR(20)
);

CREATE TABLE Event (
    event_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255),
    start_date DATE,
    end_date DATE,
    status ENUM('Pending', 'In-progress', 'Completed', 'Canceled')
);

CREATE TABLE EventGuest (
    event_id INT,
    user_id INT,
    invite_status ENUM('Accepted', 'Rejected'),
    attending_days VARCHAR(255),  
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    PRIMARY KEY (event_id, user_id)
);




